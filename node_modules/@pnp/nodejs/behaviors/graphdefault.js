import { combine, isUrlAbsolute } from "@pnp/core";
import { DefaultParse } from "@pnp/queryable";
import { DefaultHeaders, DefaultInit } from "@pnp/graph";
import { NodeFetchWithRetry } from "./fetch.js";
import { MSAL } from "./msal.js";
/**
 * Behavior for adding the default observers to the Graph queryable object
 * @param props - Specify the IGraphDefaultProps for configuring the object
 *        props.msal: (deprecated, use separate MSAL behavior)
 */
export function GraphDefault(props) {
    if ((props === null || props === void 0 ? void 0 : props.baseUrl) && !isUrlAbsolute(props === null || props === void 0 ? void 0 : props.baseUrl)) {
        throw Error("GraphDefault props.baseUrl must be absolute when supplied.");
    }
    const { baseUrl, msal } = {
        baseUrl: "https://graph.microsoft.com/",
        ...props,
    };
    return (instance) => {
        const behaviors = [DefaultHeaders(), DefaultInit(), NodeFetchWithRetry(), DefaultParse()];
        if (props === null || props === void 0 ? void 0 : props.msal) {
            behaviors.push(MSAL(msal.config, (msal === null || msal === void 0 ? void 0 : msal.scopes) || [combine(baseUrl, ".default")]));
        }
        instance.using(...behaviors);
        instance.on.pre(async (url, init, result) => {
            if (!isUrlAbsolute(url)) {
                url = combine(baseUrl, url);
            }
            return [url, init, result];
        });
        return instance;
    };
}
//# sourceMappingURL=graphdefault.js.map